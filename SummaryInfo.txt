Закрытые лекции: 1.1-1.2;2.1,2.2,2.3,3.1,4.1,4.2,  7.1;

Spring быстро


_______________________________________________________________________________________________________________________
ООП

    ООП - методология программирования, основаная на представлении программы как совокупности объектов, каждый из
 которых является экземпляром определенного класса, а классы образуют иерархию наследования. Согласно парадигме
 программа состоит из объектов, которые обмениваются сообщениями.
    Инкапсуляция - сокрытие реализации.
    Наследование - создание новой сущности на базе уже существующей.
    Полиморфизм - возможность иметь разные формы для одной и той же сущности.
    Абстракция - набор общих характеристик.
    Посылка сообщений - форма связи, взаимодействия между сущностями.
    Переиспользование- все что перечислено выше работает на повторное использование кода.

Инкапсуляция - механизм системы, в котором происходит объединение данные и методды в единый объект и скрыть его работу
Цель - уйти от зависимости от внещнего интерфейса.

Наследование – это свойство системы, позволяющее описать новый класс на основе уже существующего с
частично или полностью заимствующейся функциональностью.

Класс, от которого производится наследование, называется предком, базовым или родительским. Новый класс – потомком,
наследником или производным классом.

Полиморфизм – это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и
внутренней структуре объекта.

Абстрагирование – это способ выделить набор общих характеристик объекта, исключая из рассмотрения частные и незначимые.
Соответственно, абстракция – это набор всех таких характеристик.

Объекты взаимодействуют, посылая и получая сообщения. Сообщение — это запрос на выполнение действия, дополненный
набором аргументов, которые могут понадобиться при выполнении действия. В ООП посылка сообщения (вызов метода) — это
единственный путь передать управление объекту. Если объект должен «отвечать» на это сообщение, то у него должна иметься
соответствующий данному сообщению метод. Так же объекты, используя свои методы, могут и сами посылать сообщения
другим объектам. Обмен сообщениями реализуется с помощью динамических вызовов, что приводит к чрезвычайно
позднему связыванию (extreme late binding).

Класс – это способ описания сущности, определяющий состояние и поведение, зависящее от этого состояния, а также правила
для взаимодействия с данной сущностью (контракт).

С точки зрения программирования класс можно рассматривать как набор данных (полей, атрибутов, членов класса) и функций
для работы с ними (методов).

С точки зрения структуры программы, класс является сложным типом данных.

Объект (экземпляр) – это отдельный представитель класса, имеющий конкретное состояние и поведение, полностью
определяемое классом. Каждый объект имеет конкретные значения атрибутов и методы, работающие с этими значениями
на основе правил, заданных в классе.

Интерфейс – это набор методов класса, доступных для использования. Интерфейсом класса будет являться набор всех его
публичных методов в совокупности с набором публичных атрибутов. По сути, интерфейс специфицирует класс, чётко определяя
 все возможные действия над ним.
_______________________________________________________________________________________________________________________
 Ключевое слово Optional в Java
    Optional в Java — это специальный класс, введённый в версии Java 8, который служит контейнером для значений,
    которые могут быть либо null, либо содержать какое-то значение. Он помогает избежать распространенной ошибки,
    когда возникает NullPointerException, что улучшает читаемость и безопасность кода.
Основная цель Optional — сделать код более надежным и предсказуемым, минимизировав ситуации, когда разработчики
сталкиваются с null-значениями.
    isPresent() — проверяет, содержит ли Optional значение.
    get() — возвращает значение, если оно присутствует.
    orElse(T other) — возвращает значение, если оно есть, или возвращает переданное значение по умолчанию.
    orElseGet(Supplier<? extends T> supplier) — возвращает значение или выполняет функцию для
получения значения по умолчанию.
    orElseThrow(Supplier<? extends X> exceptionSupplier) — возвращает значение или выбрасывает исключение.
    ifPresent(Consumer<? super T> action) — выполняет действие, если значение присутствует.
    map(Function<? super T, ? extends U> mapper) — преобразует значение, если оно присутствует, и возвращает
новый Optional.
    flatMap(Function<? super T, Optional<U>> mapper) — используется для работы с вложенными Optional.
    filter(Predicate<? super T> predicate) — проверяет, удовлетворяет ли значение заданному условию.

    Преимущества использования Optional
    Избегание NullPointerException: Явное указание на возможность отсутствия значения вынуждает разработчика
обрабатывать такие ситуации.
    Более чистый и читаемый код: Упрощает логику работы с значениями, которые могут быть null.
    Чёткое намерение: Использование Optional явно показывает, что метод или переменная может быть пустой.
    Антипаттерны использования Optional
    Не использовать Optional для полей в классах. Optional лучше использовать для возвращаемых значений методов.
Хранение Optional в качестве полей объектов не рекомендуется, так как это нарушает концепцию того, как поля должны храниться.

    Не использовать Optional.get() без предварительной проверки. Это эквивалентно вызову метода на null,
что противоречит самой идее Optional.

_______________________________________________________________________________________________________________________
    Spring core - фкндоментальная часть с базовым функционалом. Работает по принципу IoC - предоставляем инструкцию
как пользоваться написанным нами кодом, не позволяем приложению управлять собственным выполнением посредством
его же кода или пользоваться зависимостями. (Управление - создание экземпляра или вызов метода)
    Spring MVC - позволяет создавать приложения, обрабатывающие HTTP запросы
    Spring Data Access - основыне инструменты для соединения с БД SQL.в этом модуле используется управление транзакциями
и интеграция с фреймворками, реальзующими объектно-реляционную привязку ORM
    Spring Testing - инструменты тестирования

    Реализация серверного приложения:
    Spring контейнер - управляет экземплярами объектов и обеспечивает взаимосвязь всего приложения
    Spring Security - настройка конфигурации и аутентификации
    Spring MVC and WebFlux - реализует конечные точки REST для общения с клиентом
        REST (Representational State Transfer) в Spring — это архитектурный стиль для создания веб-сервисов, которые
        взаимодействуют через стандартные HTTP методы (GET, POST, PUT, DELETE). Rest - возвращает объект - JSON/XML
    Spring Boot - упрощает конфигурации и снижает сложность
    Spring Integration - упрощает передачу сообщений в топики Kafka\JMS
    Spring Data - обеспечивает подключение к БД

    Maven - система сборки, загрузка зависимостей, для работы приложения, выполнение тестов, проверка соответствия
    синтаксима заданным правилам, проверка на наличие уязвимости в системе безопасности, компиляция приложения,
    упаковка приложения в архив.

     <dependencies>
     <dependency>
     <groupId>org.Springframework</groupId>
     <artifactId>Spring-context</artifactId>
     <version>5.2.6.RELEASE</version>
     </dependency>
     </dependencies>                                - Добавление зависимости для контекста Spring



_______________________________________________________________________________________________________________________
    Spring в действии:
        Spring - контейнер, предлагающий создание bean компонентов приложения и управление ими.
        Объединение bean компонентов внутри контекста (контейнера) Spring образует приложение.
        Объединение происходит по шаблону внедрения зависимостей Dependency Injection
        Spring Boot - расширение Framework, предлагающее некоторые расширения, наиболее известное - автоконфигурация
        обоснованные предположения о том, какие компоненты следует связать вместе.
        В основе работы Spring лежит Reflection API из Java Core
_______________________________________________________________________________________________________________________

    Inversion of Control (IOC) - Spring сам производит вызов нужного ему объекта
    Dependency Injection - Реализация класса зависит от того, кто его инициализирует
    Dependency Inversion - Модули верхних уровней не должны зависить от модуей нижних уровней - оба должны зависеть
    от абстракций.
_______________________________________________________________________________________________________________________
    Basic class:
       @SpringBootApplication - составная конфигурация, состоит из:
            @SpringBootConfiguration - Определяет класс как конфигурацию
            @EnableAutoConfiguration - Включает автоконфигурацию
            @ComponentScan - Включает сканирование всех компонентов (@Component, @Controller, @Service)

        Basic test class:
       @SpringBootTest - Настройка Junit, составная конфигурация:
                 @ExtendWith(SpringExtension.class) - добавляет Junit 5
_______________________________________________________________________________________________________________________
    Spring Boot DevTools -набор дополнительных инструментов разработчика
        -Перезапускает приложение при изменении кода
        -Обновляет окно браузера
        -Отключает кеширование шаблонов
        -Встроенная консоль H2
_______________________________________________________________________________________________________________________
    Application properties - Описываются настройки БД и тд, которые касаются нашего приложения.
    Можно закладывать различные конфигурации
_______________________________________________________________________________________________________________________
    Spring MVC - контроллер - обрабатывает запросы и возвращает информацию
        Entity - модель базы
        @Controller- всего-лишь идентифицирует компонент как доступный для сканиррования
        Dto - форма для ввода или вывода data transfer object
        @Component
        @Service
        @Repository
_______________________________________________________________________________________________________________________
       Сервер генерирует форму для заполнения -> Событие(кнопка)-> Получение формы (заполнение)-> Событие (кнопка) ->
   -> Получение формы (Если бы не Teamleaf, нужен @RequestParam)
        @GetMapping - добавление - возвращаем форму для заполнения
        @PostMapping - обновление - перенаправление 
_______________________________________________________________________________________________________________________
Jackson формирует и читает jason строчку - JS object Notation
   Формат данных для обмена в сети, формат данных: ключ - значение

   @JsonProperty - указывает название свойства в jason строчке
   @JsonIgnore - исклоючает поле из сериализации/десириализации
   @JsonInclude - (валидация?) можно указывать над свойство и над классом, свойство должно соблюдаться,
   для включения в json
        NON_DEFAULT - включает только недефолтные поля
                * Возможна проблема с нулями, фолсами и т.д.
        NON_NULL - включает только не пустые строчки
                * Только про ссылочные типы
   @JsonNaming(PropertyNamingStrategies) - задает стиль задачи имен для переменных (KamelCase, Snake_case и др)
        При наличии взаимных ссылок:
   @JsonManagedReference – это прямая часть ссылки, которая сериализуется обычным образом
   @JsonBackReference – это обратная часть ссылки - она будет опущена при сериализации
   @JsonIdentityInfo - Подставляет уникальный идентификатор вместо ссылки
   _
   @JsonSerialize (Ссылка на класс), в классе правила, сериализации/десериализации
   @JsonDeserialize
   @JsonIgnoreType - параметры передаются как единый объект, без названия параметра

_______________________________________________________________________________________________________________________
    @Autowired - Применяется к конструкторам или методам. Обозначает поле, в которое нужно внедрить Bean
    @Column - задает имя в таблице

    @Primary - используется при конфликте бинов, для выделения выбора
    @Qualifier - Указываем имя бина в (""), там, где нужно именно оне обозначаем имя через аннотацию

    @RequestMapping() - по умолчанию прооизводит сопоставление со всеми HTTP методами
    @RequestBody - обеспечаивает доступ к телу HTTP запроса, содержимое преобразуется в явный тип агрумента метода
    @ResponseBody - в теле сообщения возвращается та строка, которую возвращает метод если его нет, то возвращается
название html файла, на который мы переходим.

_______________________________________________________________________________________________________________________
    Работа методов - Get запрос->Controller->Service->Repository->Entity->Post запрос - Создание в обратном порядке

_______________________________________________________________________________________________________________________
Перенаправление на страницу - Нажатие кнопки пользователем (событие) ->
                              Сервер получает запрос ->
                              Обработка контроллером ->
                              Контроллер возвращает имя шаблона ->
                              Thymeleaf рендерит HTML страницу
_______________________________________________________________________________________________________________________
    @Configuration - характерный признак класса конфигурации, определяющий параметры проекта. Позволяет, к примеру,
  добавить бины в контекст.

    @Bean - объект, находящийся под управлением Spring. Завершенный прогматичный элеент с определенной бизнесс функцией
    По умолчанию Bean - Singleton

    Для обращения к конкретному бину можно использовать поле name: @Bean(name = "miki");
    Также может использоваться аннотация @Primary - задавая значение по умолчанию.

    Инициализация контекста Spring
    public class main {
     public static void main(String[] args) {
        var context = new AnnotationConfigApplicationContext(
            ProjectConfig.class);
        }
    }
_______________________________________________________________________________________________________________________
    @Controller
    Клиент передает запрос в формате HTTP, HTTPS и тд. содержит в себе практически любой строчный формат, сервер
    обрабатывает запрос и отправляет ответ.
    Уровень представления - @ html страничка, @Rest json or xml текст - преобразует jackson.
    @RequestMapping - контроллер обратавыает запрос по ссылке (добавляется для каждого)
    @RequestBody - обязует передать информацию в теле сообщения - работает с json строчкой
    @RequestParam - обязует передать ионфомацию - если информация подается отдельно друг от друга
            name - задаем название параметра (если он отличный от клиента)
            defaultValue - задает значение по умолчанию
            @Request(Param/Body = false) - передача не обязательно, возвращает null только для ссылочных типов оболочек

    Паттерн front-controller (единая точка входа) - определяет в какой контроллер передать запрос Dispatcher Servlet

    GET("/{..}")
   public ... get..(@PathVariable) - в метод гет будет подставляться запрос, который передается в вызове

   Параметр может использоваться в строке поиска

    Методы:
        GET - получить что-то от сервера
        POST - если приходит пост запрос - происходит добавление (если PK уже существует - будет оишбка)
        PUT - что в теле сообщения пришло - то и обновляется в таблице
        PATCH - обновляет то, что приходит в теле сообщения
        DELETE - не реализуем, вместо него два предыдущих.

    @ResponseEntity - можем возвращать сущность (тело), тогда в return соответственно прописывам
            new responseEntity <>(body,method, HttpStatus.Created)
_______________________________________________________________________________________________________________________
    Управление БД

    Реляционные БД - Spring boot starter jpa (Hibernate(jacarta persistens API)) + (PostgreSQL(JDBS Driver))

    JPA (Java/Jakarta Persistens API) - спецификация, предоставляет набор анотация для описания класса синхронизации
    с БД + правила реализации ORM

    hibernate - ORM Framework, самодостаточная реализация JPA,

    Spring Data - объединяет под собой репозитории

    Зависимости,    SB starter data jpa
                    postgresql - драйвер
                    flyway-core

    @Entity - Класс должен синхронизироваться с БД (работает только с SpringData JPA) - У каждого объекта должен быть ID
    @Table- задаем имя таблицы
    @Column - переименовать столбец (nullable = false не может быть пустым, unique = true параметр уникален)
                                                    @columDefinition = "text[]" - явно задать тип данных
                                                    @JDbcTypeCode (прописываем актуальный формат для таблицы (SQL))
                                                    insertable = fals - параметр не регистрируется при сохранении,
                                                      ставится по умолчанию
                                                    updateble = false - столбец нельзя обновить из запроса обновления

    __
    Если делаем перечисоение -> @Enumerated(EnumType.STRING) - задаем тип перечисления
                                @Column(name - "type", nullable = false) - значение будет храниться как строчка
    __

    У сущности связи можно настраивать не с объектом полностью (тогда подгружается его все данные), а только с ID
        и подгружать данные по запросу. В этом случае:
        @Many to one(targetEntity = User.class) - для ORM указываем поле, соответствующее классу
        @Query(nativeQuery = true, пишем sql запрос) - если не сгенерировать автоматически - Можем переопределить
                                                                    запросы из CRUD

        @Transactional - при выполнении запроса открывается закрывается транзакция
        @Modifying - ставим, если переписываем CRUD

    Параметр fetch доступен на анотациях связи.
                            Если связь заканчивается на One - по умолчанию Eager жадное
                                                        Many- по умолчанию Lazy ленивое
                Обозначает как будет извлекаться данные при вызове. Ленивая - не извлекает данные при извлечении, жадная
                    подтягивает все из другой таблички. Ленивый подтягивает более свежую информацию, жадный ускоряет
    Параметр MappedBy - (mappedBy = " ") - не нужно формировать список, подтягиваем его из другой таблицы


    @JoinColumn - формируются благодаря связям, там joinColumns и inverseJoinColumns

    ORM - object relationship management сопоставляет сущности Java и БД
    ORM создает БД с помощью миграций (процесс), для более тонкой настройки используются дополнительные библиотеки:
    liquidbase/flyway  - управление структурой БД. Changlog выполняются при старте приложений. Требуется обновление в
    applicationproperty
    Jpa Buddy Plugin - управляет созданием

    Возможно записать файлы sсhema.sql (создание, связь, удаление) data.sql(наполнение таблиц)

    ПАГИНАЦИЯ: можем оформить самостоятельно или :
            Pageable pegeable = PageRequest.of(page, size, Sort.by("name"));
                        page - номер страницы
                        size - количество записей

    В сервисе можем вызвать Page объект и передать его в DTO

    ВАЛИДАЦИЯ
    Может быть применена к любым объектам, по приходам в БД, реализуется на уровне кода.
        Аннотаций для валидаций большое количество, названия говорящие. Входят в библиотеку jakarta.validation
        В классе ставим аннотацию @Validated там, где нужно чтобы валидация отработала



    Changelog - файлики с командами для управления. Результирующий файл также changelog
    Changelog - состаит из changset (к примеру: создание таблицы, обновление таблицы, создание связи между таблицами)
    м.б. представлени как xml, sql команды

    Управление состояние БД - управление миграциями
_______________________________________________________________________________________________________________________
    Многопоточка используется также как и в Java Core                                                                   @Configuration
    Если нужно создать пул потоков - создается бин, по имени которого потом вызываем                                    public class ProjectConfiguration {
    1 метод - 1 пул, возвразаем экзекьютор
    Когда хотим выполнить какой-либо метод как асинхронную задачу, над ним ставим @Async("название пула")               public Executor orderExecutor(){
    Прописываем метод в анатации которого обозначаем пул - расписываем пул - в сервисе вызываемметод                    ThreadPoolTaskExecutor executor =
                                                                                                                                        new ThreadPoolTaskExecutor();
    Запуск по расписанию:                                                                                                       executor.setCorePoolSize(1);
        @EnebleScheduling - аннотация над классом для запуска метода по расписанию                                              executor.setMaxPoolSize(5);
        @Scheduled - над самим методом + @Async - будет пул спринга                                                             executor.setQueueCapacity(20);
                                                                                                                                executor.setKeepAliveSeconds(60);
        Для работы с временем метод должен имплементить Delayed                                                                 executor.setThreadNamePrefix("XXX-EXECUTOR-");
        переопределять getDelay и compareTo                                                                                     executor.initialize();
                                                                                                                                return executor;
                                                                                                                            }
                                                                                                                        }
_______________________________________________________________________________________________________________________
    Ошибки/Исключения
    Можем создавать Exception и создавать их иерархию
    Ошибку проверяем через if если не проходим - выкидываем Exception, если проходим - отдаем результат
    За счет дополненния кастомной ошибки своего исключения, можем добавлять поле статус, и выделять кастомную ошибку
    Для необычных ошибок, но постоянных (вместо 500-ой должны возвращать 200) можно использовать Controller Advice - Это
    нестандартная постоянная ситуация.
    Либо Controller Advice через @ControllerAdvice
    Для обработки исключения @ExceptionHandler (вид исключения для обработки) - пишем паблик метод с своим названием
    Он будет перехватывать ошибки и экземпляр придет в этот метод.
    Получаем метод и статус.
                             @ResponseStatus задаем статус, тогда обработка будет в Controller Advice
                             @ResponseBody - в теле уйдет тело в метод обработки

                                        либо ResponseStatusExceptions - Service - throw new танзвание (статус, сообщение)
                                        в Controller в блоке try-cath перехватываем
    @ExceptionHandler
    @ResponseStatusException - используется на уровне контроллера

    На каждый статус возвращается своя страничка или прописывается единообразная

_______________________________________________________________________________________________________________________

    Java Mail Sender
    Настройки находятся в проперти файле для отправки писем
    smtp(465)/smtps(8043)

    Создается письмо в SimpleMeilMessege (setFrom, setTo, setSubject, setText)
    Вложения реализуются через MimeMessage (файлики)
    Если прописано взаимодействие с сторонним сервисом, то через http
_______________________________________________________________________________________________________________________
    Логирование
    Возможности включены в Spring Boot - @Slf4j дает доступ к log. Default - Log4j
                    info - хотим зафиксировать какую-либо информацию (остается в промышленной среде и попадает в логи)
                    debug - информация для отладки (только на стадии разработки)
                    error - логирование Exception

            МОжешь просто передать строчку, а можем добавить объект Frolable или на какой либо другой объект
_______________________________________________________________________________________________________________________
    Docer
Ставим докер - докер демон (серверное приложение) выполняет весь необходимый функционал
    Клиенское приложение - консоль или десктоп
    Докер реестр - удаленная платформа, в ней хранятся образы того, что ы запускаем
    репозитории докеров - тоже для хранения


    В образе файл с инструкциями, докер компоуз - инструмент, используется если нам нужно запустить несколько приложений
    Контейнер - готовая среда для запуска.
    В промышленной среде докер может использоваться по-другому - докеры кафки и субд не разворачиваются


_______________________________________________________________________________________________________________________
    Kafka
    Кафка - система, приложение, не принадлежэит проекту.
    Ставится и устанавливается отдельно.
    Для в.д. с кафкой - org.springframework.kafka, у кафки свой блок секьюрити
    Настройки для произвордителей и для потребителей отличаются, но есть часть общих
    Информация делится по топикам (темам) - один род информации для одного топика
    С одним топиком могут взаимодействовать как несколько потребителей, так и несколько производителей
    Топики делятся на разделы (партиции)
    Производителей у партицей мб много. мб закреплены за одним производителем
    1 раздел - 1 потребитель
    индекс в разделе - смещения. Если за одним разделом несколько потребителей, то они будут конкурировать
    После каждого прочтения фиксируется функционал коммита
    авто коммиты могут привести в случае разрыва связи- лучше отключать - тогда могут возникать дубли, используются если
    скорость важнее потерь
    Производитель знает только дошло ли до кафки информация или нет
    Ограничение кафки - ресурсы

    Минусы - нет информации совершена ли доставка - рядом можно создать еще один топик куда потребитель пишет что получил, что не получил
    Потребитель становится производителем информации по ошибкам

        Данные в топиках храняться определенное количество времени, соответственно новый потребитель не знает старые данные

        Физические файлы не добавляем в кафку, только ссылки

    На стороне пполучателя должна быть выстроена система с синхронизации топиков - две бд, одна синхрон другая нет (записывается изначально)

    Когда производитель добавляет информацию в топик, к этому сооббщению можно добавить мета информацию
    К сообщению можно добавить ключ и по ключам и по ключам делить на партиции

    Должны быть выполнены события, чтобы прозводились сообщения в кафку

   или по времени (слушатель кафки)


   Очереди 1 очередь - один производитель
   в очереди есть приоритеты и так продвинуть сообщение в очередь
   получатель получает сообщения с более высоким приоритетом
    система обратного оповещеня
    пропускная способность ниже

_______________________________________________________________________________________________________________________

    Балансировщик
      При вд нескольких образцов приложение должно знать куда отправлять сообщение
      Рядом с отправителем размещается балансировщик, который зает состояние получателя (Хапрокси)
      Балансировщик мб на исходящий или на входящий прокси (Иджинкс)

      Если делаем без всего, то можем реализовать на уровне кода в спринг клауд

_______________________________________________________________________________________________________________________
    Логирование трасировка мониторинг - обсервабилити - наблюдаемострь
        В реальности это неудобно т.к. нет единого механизма

    Логирование - в приложении есть логи
    в логировании несколько уровень - ошибки, предупреждение, информации, дебага
    ошибки - всегда логируются
    Каждое приложение пишет свой лог файл

    Два стека технологий логирования - ELK эластик стерч - хранилище, база.
    Л - лог стэйч - пришедшие логи обрабатываются и приставляются в нужном формате
    к - кебана - для реализации

    рядом с приложением устанавливается файл бит где все пишется
    елк можеот работать с метнриками - но сейчас в разработке и никто не работает с эти
    проблема елк в санкциях, так как не в полноценном виде

    еще есть опен серч вместо буквы е - опен серч ддашборт - вместо кебана могут передаваться тем же самым файл битом
                                                                        и обрабатываться тем же самым логстейджем
    Помимо этого опен серч вместо файлбита может использовать флюинт бит - тоже самое но передает в опен серч
    Флюинтиб - хранилище


    метрики - относятся к системе мониторинга - количественные показатели

    Сбор метрик - нормальный вариант - есть хранилище метрик
    есть агент, который эти метрики собирает, у приложения есть энд поинты в контроллерах
    агент обращается в криложению забирает информацию - в спринг бут библиотека актуатор она способна собирать самостоятельно
    предоставляет поинт для работоспособности системы и эти метрики связаны с дисковым пространством и прочим
    +позволяет описать собственные метрики которые можно описать по эндпоинтам

    хранятся в с истеме хранения (промитеус), то что там хранится обрабатывает ся (виктория) или необрабатывается. а сразу визуализируется
    графана - для визуализации метрик

    Графане нужен постгресс и еще есть приложение, следящее за порогами - способен отправить письмо на почту


    трассировка - отслеживание запроса по сем сервисам которыые задействованы


